# üöÄ Colmeia - Docker Compose
# Stack completa para desenvolvimento e produ√ß√£o

version: '3.8'

services:
  # ===========================================
  # üóÑÔ∏è PostgreSQL Database
  # ===========================================
  postgres:
    image: postgres:15-alpine
    container_name: colmeia-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: colmeia_test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - colmeia-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ===========================================
  # üöÄ Colmeia API
  # ===========================================
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: colmeia-api
    restart: unless-stopped
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_NAME: colmeia_test
      
      # JWT
      JWT_SECRET: your-super-secret-jwt-key-for-docker
      JWT_EXPIRES_IN: 1h
      
      # Application
      PORT: 3000
      NODE_ENV: production
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - colmeia-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================
  # üìä Redis (Cache e Rate Limiting)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: colmeia-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - colmeia-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ===========================================
  # üìà Prometheus (M√©tricas)
  # ===========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: colmeia-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - colmeia-network

  # ===========================================
  # üìä Grafana (Dashboards)
  # ===========================================
  grafana:
    image: grafana/grafana:latest
    container_name: colmeia-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - colmeia-network

# ===========================================
# üåê Networks
# ===========================================
networks:
  colmeia-network:
    driver: bridge
    name: colmeia-network

# ===========================================
# üíæ Volumes
# ===========================================
volumes:
  postgres_data:
    name: colmeia_postgres_data
  redis_data:
    name: colmeia_redis_data
  prometheus_data:
    name: colmeia_prometheus_data
  grafana_data:
    name: colmeia_grafana_data
